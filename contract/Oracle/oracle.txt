package Oracle

import (
"math/big"
"strings"

ethereum "github.com/ethereum/go-ethereum"
"github.com/ethereum/go-ethereum/accounts/abi"
"github.com/ethereum/go-ethereum/accounts/abi/bind"
"github.com/ethereum/go-ethereum/common"
"github.com/ethereum/go-ethereum/core/types"
"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StoreABI is the input ABI used to generate the binding from.
const StoreABI = "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"PriceAdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPriceMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedPriceMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceMantissa\",\"type\":\"uint256\"}],\"name\":\"PricePosted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPriceOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contractCToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractCToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPriceMantissa\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setDirectPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setDirectPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferPriceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// AssetPrices is a free data retrieval call binding the contract method 0x5e9a523c.
//
// Solidity: function assetPrices(address asset) view returns(uint256)
func (_Store *StoreCaller) AssetPrices(opts *bind.CallOpts, asset common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "assetPrices", asset)
	return *ret0, err
}

// AssetPrices is a free data retrieval call binding the contract method 0x5e9a523c.
//
// Solidity: function assetPrices(address asset) view returns(uint256)
func (_Store *StoreSession) AssetPrices(asset common.Address) (*big.Int, error) {
	return _Store.Contract.AssetPrices(&_Store.CallOpts, asset)
}

// AssetPrices is a free data retrieval call binding the contract method 0x5e9a523c.
//
// Solidity: function assetPrices(address asset) view returns(uint256)
func (_Store *StoreCallerSession) AssetPrices(asset common.Address) (*big.Int, error) {
	return _Store.Contract.AssetPrices(&_Store.CallOpts, asset)
}

// GetUnderlyingPrice is a free data retrieval call binding the contract method 0xfc57d4df.
//
// Solidity: function getUnderlyingPrice(address cToken) view returns(uint256)
func (_Store *StoreCaller) GetUnderlyingPrice(opts *bind.CallOpts, cToken common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "getUnderlyingPrice", cToken)
	return *ret0, err
}

// GetUnderlyingPrice is a free data retrieval call binding the contract method 0xfc57d4df.
//
// Solidity: function getUnderlyingPrice(address cToken) view returns(uint256)
func (_Store *StoreSession) GetUnderlyingPrice(cToken common.Address) (*big.Int, error) {
	return _Store.Contract.GetUnderlyingPrice(&_Store.CallOpts, cToken)
}

// GetUnderlyingPrice is a free data retrieval call binding the contract method 0xfc57d4df.
//
// Solidity: function getUnderlyingPrice(address cToken) view returns(uint256)
func (_Store *StoreCallerSession) GetUnderlyingPrice(cToken common.Address) (*big.Int, error) {
	return _Store.Contract.GetUnderlyingPrice(&_Store.CallOpts, cToken)
}

// IsPriceOracle is a free data retrieval call binding the contract method 0x66331bba.
//
// Solidity: function isPriceOracle() view returns(bool)
func (_Store *StoreCaller) IsPriceOracle(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "isPriceOracle")
	return *ret0, err
}

// IsPriceOracle is a free data retrieval call binding the contract method 0x66331bba.
//
// Solidity: function isPriceOracle() view returns(bool)
func (_Store *StoreSession) IsPriceOracle() (bool, error) {
	return _Store.Contract.IsPriceOracle(&_Store.CallOpts)
}

// IsPriceOracle is a free data retrieval call binding the contract method 0x66331bba.
//
// Solidity: function isPriceOracle() view returns(bool)
func (_Store *StoreCallerSession) IsPriceOracle() (bool, error) {
	return _Store.Contract.IsPriceOracle(&_Store.CallOpts)
}

// PriceAdmin is a free data retrieval call binding the contract method 0x57dda26a.
//
// Solidity: function priceAdmin() view returns(address)
func (_Store *StoreCaller) PriceAdmin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Store.contract.Call(opts, out, "priceAdmin")
	return *ret0, err
}

// PriceAdmin is a free data retrieval call binding the contract method 0x57dda26a.
//
// Solidity: function priceAdmin() view returns(address)
func (_Store *StoreSession) PriceAdmin() (common.Address, error) {
	return _Store.Contract.PriceAdmin(&_Store.CallOpts)
}

// PriceAdmin is a free data retrieval call binding the contract method 0x57dda26a.
//
// Solidity: function priceAdmin() view returns(address)
func (_Store *StoreCallerSession) PriceAdmin() (common.Address, error) {
	return _Store.Contract.PriceAdmin(&_Store.CallOpts)
}

// SetDirectPrice is a paid mutator transaction binding the contract method 0x09a8acb0.
//
// Solidity: function setDirectPrice(address _asset, uint256 _price) returns()
func (_Store *StoreTransactor) SetDirectPrice(opts *bind.TransactOpts, _asset common.Address, _price *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "setDirectPrice", _asset, _price)
}

// SetDirectPrice is a paid mutator transaction binding the contract method 0x09a8acb0.
//
// Solidity: function setDirectPrice(address _asset, uint256 _price) returns()
func (_Store *StoreSession) SetDirectPrice(_asset common.Address, _price *big.Int) (*types.Transaction, error) {
	return _Store.Contract.SetDirectPrice(&_Store.TransactOpts, _asset, _price)
}

// SetDirectPrice is a paid mutator transaction binding the contract method 0x09a8acb0.
//
// Solidity: function setDirectPrice(address _asset, uint256 _price) returns()
func (_Store *StoreTransactorSession) SetDirectPrice(_asset common.Address, _price *big.Int) (*types.Transaction, error) {
	return _Store.Contract.SetDirectPrice(&_Store.TransactOpts, _asset, _price)
}

// SetDirectPrice0 is a paid mutator transaction binding the contract method 0x24e48a2d.
//
// Solidity: function setDirectPrice(address[] _assets, uint256[] _prices) returns()
func (_Store *StoreTransactor) SetDirectPrice0(opts *bind.TransactOpts, _assets []common.Address, _prices []*big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "setDirectPrice0", _assets, _prices)
}

// SetDirectPrice0 is a paid mutator transaction binding the contract method 0x24e48a2d.
//
// Solidity: function setDirectPrice(address[] _assets, uint256[] _prices) returns()
func (_Store *StoreSession) SetDirectPrice0(_assets []common.Address, _prices []*big.Int) (*types.Transaction, error) {
	return _Store.Contract.SetDirectPrice0(&_Store.TransactOpts, _assets, _prices)
}

// SetDirectPrice0 is a paid mutator transaction binding the contract method 0x24e48a2d.
//
// Solidity: function setDirectPrice(address[] _assets, uint256[] _prices) returns()
func (_Store *StoreTransactorSession) SetDirectPrice0(_assets []common.Address, _prices []*big.Int) (*types.Transaction, error) {
	return _Store.Contract.SetDirectPrice0(&_Store.TransactOpts, _assets, _prices)
}

// SetUnderlyingPrice is a paid mutator transaction binding the contract method 0x127ffda0.
//
// Solidity: function setUnderlyingPrice(address cToken, uint256 underlyingPriceMantissa) returns()
func (_Store *StoreTransactor) SetUnderlyingPrice(opts *bind.TransactOpts, cToken common.Address, underlyingPriceMantissa *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "setUnderlyingPrice", cToken, underlyingPriceMantissa)
}

// SetUnderlyingPrice is a paid mutator transaction binding the contract method 0x127ffda0.
//
// Solidity: function setUnderlyingPrice(address cToken, uint256 underlyingPriceMantissa) returns()
func (_Store *StoreSession) SetUnderlyingPrice(cToken common.Address, underlyingPriceMantissa *big.Int) (*types.Transaction, error) {
	return _Store.Contract.SetUnderlyingPrice(&_Store.TransactOpts, cToken, underlyingPriceMantissa)
}

// SetUnderlyingPrice is a paid mutator transaction binding the contract method 0x127ffda0.
//
// Solidity: function setUnderlyingPrice(address cToken, uint256 underlyingPriceMantissa) returns()
func (_Store *StoreTransactorSession) SetUnderlyingPrice(cToken common.Address, underlyingPriceMantissa *big.Int) (*types.Transaction, error) {
	return _Store.Contract.SetUnderlyingPrice(&_Store.TransactOpts, cToken, underlyingPriceMantissa)
}

// TransferPriceAdmin is a paid mutator transaction binding the contract method 0x6523f047.
//
// Solidity: function transferPriceAdmin(address newAdmin) returns()
func (_Store *StoreTransactor) TransferPriceAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "transferPriceAdmin", newAdmin)
}

// TransferPriceAdmin is a paid mutator transaction binding the contract method 0x6523f047.
//
// Solidity: function transferPriceAdmin(address newAdmin) returns()
func (_Store *StoreSession) TransferPriceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Store.Contract.TransferPriceAdmin(&_Store.TransactOpts, newAdmin)
}

// TransferPriceAdmin is a paid mutator transaction binding the contract method 0x6523f047.
//
// Solidity: function transferPriceAdmin(address newAdmin) returns()
func (_Store *StoreTransactorSession) TransferPriceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Store.Contract.TransferPriceAdmin(&_Store.TransactOpts, newAdmin)
}

// StorePriceAdminTransferredIterator is returned from FilterPriceAdminTransferred and is used to iterate over the raw logs and unpacked data for PriceAdminTransferred events raised by the Store contract.
type StorePriceAdminTransferredIterator struct {
	Event *StorePriceAdminTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorePriceAdminTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorePriceAdminTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorePriceAdminTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorePriceAdminTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorePriceAdminTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorePriceAdminTransferred represents a PriceAdminTransferred event raised by the Store contract.
type StorePriceAdminTransferred struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPriceAdminTransferred is a free log retrieval operation binding the contract event 0x8882c10d3ba593f97df90263d1d7e7d36f3c647682426c051ecc3618e3172cea.
//
// Solidity: event PriceAdminTransferred(address indexed previousAdmin, address indexed newAdmin)
func (_Store *StoreFilterer) FilterPriceAdminTransferred(opts *bind.FilterOpts, previousAdmin []common.Address, newAdmin []common.Address) (*StorePriceAdminTransferredIterator, error) {

	var previousAdminRule []interface{}
	for _, previousAdminItem := range previousAdmin {
		previousAdminRule = append(previousAdminRule, previousAdminItem)
	}
	var newAdminRule []interface{}
	for _, newAdminItem := range newAdmin {
		newAdminRule = append(newAdminRule, newAdminItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "PriceAdminTransferred", previousAdminRule, newAdminRule)
	if err != nil {
		return nil, err
	}
	return &StorePriceAdminTransferredIterator{contract: _Store.contract, event: "PriceAdminTransferred", logs: logs, sub: sub}, nil
}

// WatchPriceAdminTransferred is a free log subscription operation binding the contract event 0x8882c10d3ba593f97df90263d1d7e7d36f3c647682426c051ecc3618e3172cea.
//
// Solidity: event PriceAdminTransferred(address indexed previousAdmin, address indexed newAdmin)
func (_Store *StoreFilterer) WatchPriceAdminTransferred(opts *bind.WatchOpts, sink chan<- *StorePriceAdminTransferred, previousAdmin []common.Address, newAdmin []common.Address) (event.Subscription, error) {

	var previousAdminRule []interface{}
	for _, previousAdminItem := range previousAdmin {
		previousAdminRule = append(previousAdminRule, previousAdminItem)
	}
	var newAdminRule []interface{}
	for _, newAdminItem := range newAdmin {
		newAdminRule = append(newAdminRule, newAdminItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "PriceAdminTransferred", previousAdminRule, newAdminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorePriceAdminTransferred)
				if err := _Store.contract.UnpackLog(event, "PriceAdminTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePriceAdminTransferred is a log parse operation binding the contract event 0x8882c10d3ba593f97df90263d1d7e7d36f3c647682426c051ecc3618e3172cea.
//
// Solidity: event PriceAdminTransferred(address indexed previousAdmin, address indexed newAdmin)
func (_Store *StoreFilterer) ParsePriceAdminTransferred(log types.Log) (*StorePriceAdminTransferred, error) {
	event := new(StorePriceAdminTransferred)
	if err := _Store.contract.UnpackLog(event, "PriceAdminTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StorePricePostedIterator is returned from FilterPricePosted and is used to iterate over the raw logs and unpacked data for PricePosted events raised by the Store contract.
type StorePricePostedIterator struct {
	Event *StorePricePosted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorePricePostedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorePricePosted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorePricePosted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorePricePostedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorePricePostedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorePricePosted represents a PricePosted event raised by the Store contract.
type StorePricePosted struct {
	Asset                  common.Address
	PreviousPriceMantissa  *big.Int
	RequestedPriceMantissa *big.Int
	NewPriceMantissa       *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterPricePosted is a free log retrieval operation binding the contract event 0xdd71a1d19fcba687442a1d5c58578f1e409af71a79d10fd95a4d66efd8fa9ae7.
//
// Solidity: event PricePosted(address asset, uint256 previousPriceMantissa, uint256 requestedPriceMantissa, uint256 newPriceMantissa)
func (_Store *StoreFilterer) FilterPricePosted(opts *bind.FilterOpts) (*StorePricePostedIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "PricePosted")
	if err != nil {
		return nil, err
	}
	return &StorePricePostedIterator{contract: _Store.contract, event: "PricePosted", logs: logs, sub: sub}, nil
}

// WatchPricePosted is a free log subscription operation binding the contract event 0xdd71a1d19fcba687442a1d5c58578f1e409af71a79d10fd95a4d66efd8fa9ae7.
//
// Solidity: event PricePosted(address asset, uint256 previousPriceMantissa, uint256 requestedPriceMantissa, uint256 newPriceMantissa)
func (_Store *StoreFilterer) WatchPricePosted(opts *bind.WatchOpts, sink chan<- *StorePricePosted) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "PricePosted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorePricePosted)
				if err := _Store.contract.UnpackLog(event, "PricePosted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePricePosted is a log parse operation binding the contract event 0xdd71a1d19fcba687442a1d5c58578f1e409af71a79d10fd95a4d66efd8fa9ae7.
//
// Solidity: event PricePosted(address asset, uint256 previousPriceMantissa, uint256 requestedPriceMantissa, uint256 newPriceMantissa)
func (_Store *StoreFilterer) ParsePricePosted(log types.Log) (*StorePricePosted, error) {
	event := new(StorePricePosted)
	if err := _Store.contract.UnpackLog(event, "PricePosted", log); err != nil {
		return nil, err
	}
	return event, nil
}
